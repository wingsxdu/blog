<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术向 on beihai</title>
    <link>https://www.wingsxdu.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/</link>
    <description>Recent content in 技术向 on beihai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 02 Nov 2019 16:13:13 +0800</lastBuildDate>
    
	<atom:link href="https://www.wingsxdu.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql 与 Innodb（转载）</title>
      <link>https://www.wingsxdu.com/post/2019-11-02-mysql-innodb/</link>
      <pubDate>Sat, 02 Nov 2019 16:13:13 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-11-02-mysql-innodb/</guid>
      <description>&lt;p&gt;作为一名开发人员，在日常的工作中会难以避免地接触到数据库，无论是基于文件的 sqlite 还是工程上使用非常广泛的 MySQL、PostgreSQL，但是一直以来也没有对数据库有一个非常清晰并且成体系的认知，所以最近两个月的时间看了几本数据库相关的书籍并且阅读了 MySQL 的官方文档，希望对各位了解数据库的、不了解数据库的有所帮助。&lt;/p&gt;

&lt;p&gt;&lt;div align=&#34;center&#34;&gt;

&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://www.wingsxdu.com/image/mysql.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://www.wingsxdu.com/image/mysql.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
本文中对于数据库的介绍以及研究都是在 MySQL 上进行的，如果涉及到了其他数据库的内容或者实现会在文中单独指出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么 Redis 选择单线程模型 · Why&#39;s THE Design?（转载）</title>
      <link>https://www.wingsxdu.com/post/2019-11-02-whys-the-design-redis-single-thread/</link>
      <pubDate>Sat, 02 Nov 2019 14:04:10 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-11-02-whys-the-design-redis-single-thread/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;为什么这么设计（Why’s THE Design）是一系列关于计算机领域中程序设计决策的文章，我们在这个系列的每一篇文章中都会提出一个具体的问题并从不同的角度讨论这种设计的优缺点、对具体实现造成的影响。如果你有想要了解的问题，可以在文章下面留言。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>为什么使用通信来共享内存？· Why&#39;s THE Design?（转载）</title>
      <link>https://www.wingsxdu.com/post/2019-11-01-whys-the-design-communication-shared-memory/</link>
      <pubDate>Fri, 01 Nov 2019 14:24:34 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-11-01-whys-the-design-communication-shared-memory/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;为什么这么设计（Why’s THE Design）是一系列关于计算机领域中程序设计决策的文章，我们在这个系列的每一篇文章中都会提出一个具体的问题并从不同的角度讨论这种设计的优缺点、对具体实现造成的影响。如果你有想要了解的问题，可以在文章下面留言。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>为什么 TCP 建立连接需要三次握手 · Why&#39;s THE Design?（转载）</title>
      <link>https://www.wingsxdu.com/post/2019-11-01-whys-the-design-tcp-three-way-handshake/</link>
      <pubDate>Fri, 01 Nov 2019 12:14:37 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-11-01-whys-the-design-tcp-three-way-handshake/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;为什么这么设计（Why’s THE Design）是一系列关于计算机领域中程序设计决策的文章，我们在这个系列的每一篇文章中都会提出一个具体的问题并从不同的角度讨论这种设计的优缺点、对具体实现造成的影响。如果你有想要了解的问题，可以在文章下面留言。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>一些经常忘记的命令</title>
      <link>https://www.wingsxdu.com/post/2019-10-18-%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%B8%B8%E5%BF%98%E8%AE%B0%E7%9A%84%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 18 Oct 2019 12:50:20 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-10-18-%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%B8%B8%E5%BF%98%E8%AE%B0%E7%9A%84%E5%91%BD%E4%BB%A4/</guid>
      <description>Ubuntu Ubuntu 后台运行程序 1 nohup ./test 输出 appendding output to &amp;lsquo;nohub.out&amp;rsquo; 大意为将命令行输出的信息写入到&amp;rsquo;nohub.out&amp;rsquo;文件 如何关闭进程? 1 2 3 ps -A #</description>
    </item>
    
    <item>
      <title>内存空洞</title>
      <link>https://www.wingsxdu.com/post/2019-10-10-memoryholes/</link>
      <pubDate>Thu, 10 Oct 2019 10:35:26 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-10-10-memoryholes/</guid>
      <description>&lt;p&gt;计算机在加载和保存数据时，如果内存地址合理地对齐的将会更有效率。例如2字节大小的int16类型的变量地址应该是偶数，一个4字节大小的rune类型变量的地址应该是4的倍数，一个8字节大小的float64、uint64或64-bit指针类型变量的地址应该是8字节对齐的。但是对于再大的地址对齐倍数则是不需要的，即使是complex128等较大的数据类型最多也只是8字节对齐。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程与 Goroutine 调度</title>
      <link>https://www.wingsxdu.com/post/2019-09-29-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E-goroutine-%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 29 Sep 2019 17:20:37 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-09-29-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E-goroutine-%E8%B0%83%E5%BA%A6/</guid>
      <description>并发与并行 并行是指两个或者多个事件在同一时刻发生；并发是指两个或多个事件在同一时间间隔发生。 并行是在不同实体上的多个事件，在多台处理器上同时</description>
    </item>
    
    <item>
      <title>GC 垃圾回收机制(改)</title>
      <link>https://www.wingsxdu.com/post/2019-09-29-golanggc/</link>
      <pubDate>Fri, 27 Sep 2019 21:42:49 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-09-29-golanggc/</guid>
      <description>首先我们了解下什么是垃圾回收 内存管理是开发应用中的一大难题。传统的系统级编程语言（主要指C/C++）中，程序开发者必须对内存小心的进行管理操</description>
    </item>
    
    <item>
      <title>GO 1.13版本改进</title>
      <link>https://www.wingsxdu.com/p1391/</link>
      <pubDate>Mon, 09 Sep 2019 03:45:17 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1391/</guid>
      <description>Go1.13 版本在 Go1.12 发布六个月后推出。它的大部分变化都在工具链(toolchain)，运行时(runtime)和库的实现。从 Go1.13 开始，在Go1.11开始</description>
    </item>
    
    <item>
      <title>beego 是怎样的存在？</title>
      <link>https://www.wingsxdu.com/p1386/</link>
      <pubDate>Sun, 08 Sep 2019 15:59:52 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1386/</guid>
      <description>beego 是一个 RESTFul 的 Go 应用框架，可以用来快速开发 API 、Web、后端服务等各种应用，主程是国人，开发历史悠久。 beego 可以说是小白学习 golang 的“不二门选”，无论是</description>
    </item>
    
    <item>
      <title>UTF-8 编码与 mysql中的 utf8、utf8mb4</title>
      <link>https://www.wingsxdu.com/p1373/</link>
      <pubDate>Mon, 19 Aug 2019 15:10:43 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1373/</guid>
      <description>UTF-8编码 UTF-8 是一种变长字节编码方式。对于某一个字符的UTF-8编码，如果只有一个字节则其最高二进制位为0；如果是多字节，其第一个字节从最</description>
    </item>
    
    <item>
      <title>Go 变量覆盖问题</title>
      <link>https://www.wingsxdu.com/p1368/</link>
      <pubDate>Fri, 09 Aug 2019 03:12:54 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1368/</guid>
      <description>如下代码 package main func main() { x := 1 println(x) // 1 { println(x) // 1 x := 2 println(x) // 2 // 新的 x 变量的作用域只在代码块内部 } println(x) // 1 } 代码引用变量时总会最优先查找当前代码块中（不包</description>
    </item>
    
    <item>
      <title>Go ECHO JWT 变量类型</title>
      <link>https://www.wingsxdu.com/p1364/</link>
      <pubDate>Tue, 06 Aug 2019 10:09:33 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1364/</guid>
      <description>最近在写自己的开源案例时，需要在 token 里面存入用户的 uid，变量类型为 uint64,然而解析token 中的值时却报错变量不符，类型为 float。</description>
    </item>
    
    <item>
      <title>Go 全局变量作用域</title>
      <link>https://www.wingsxdu.com/p1357/</link>
      <pubDate>Tue, 23 Jul 2019 10:55:16 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1357/</guid>
      <description>问题所在 全局变量的作用域是整个包，局部变量的作用域是该变量所在的花括号内。最近使用 gorm 时遇到了使用全局变量赋值作用域的问题。 var db *gorm.DB // 全局变量用</description>
    </item>
    
    <item>
      <title>Go mod 模块化管理</title>
      <link>https://www.wingsxdu.com/p1351/</link>
      <pubDate>Tue, 23 Jul 2019 08:21:35 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1351/</guid>
      <description>前言 在Go语言的发展史中，2018年注定是一个重要的时间点，因为在8月正式发布了Go1.11。Go1.11语言部分虽然没有变化，但是带来了3</description>
    </item>
    
    <item>
      <title>Linux Mysql 数据库相关操作</title>
      <link>https://www.wingsxdu.com/p1258/</link>
      <pubDate>Thu, 30 May 2019 12:27:40 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1258/</guid>
      <description>登录并创建数据库： mysql -u username-p &amp;lt;spancreate database databasename;&amp;lt;/span use databasename; 修改表字段属性 alter table user MODIFY uid VARCHAR(10); 查看表结构 desc user; 查看建表语句 show create table user; 退出Mysql quit; 导出整个数据库 mysqldump -u 用户名 -p 数据</description>
    </item>
    
    <item>
      <title>Ubunutu ECS服务器安装界面图形</title>
      <link>https://www.wingsxdu.com/p1256/</link>
      <pubDate>Wed, 29 May 2019 03:52:24 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1256/</guid>
      <description>安装流程 linux 服务器都是没有界面图形的——当然也不需要界面图形，会消耗多余的资源。但是为了方便演示和开发调试，也会有界面图形的开发需求。 安装流程</description>
    </item>
    
    <item>
      <title>Ubuntu FISCO BCOS Web3 应用开发环境搭建</title>
      <link>https://www.wingsxdu.com/p1250/</link>
      <pubDate>Wed, 29 May 2019 03:08:31 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1250/</guid>
      <description>Java 应用的开发环境太繁琐了， 记一下搭建流程。（简化版） 环境搭建 安装JDK FISCO BCOS 要求 JDK 为Oracle 版本，下载链接：https://www.ora</description>
    </item>
    
    <item>
      <title>Java Grpc 工程中使用</title>
      <link>https://www.wingsxdu.com/p1227/</link>
      <pubDate>Thu, 23 May 2019 07:06:40 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1227/</guid>
      <description>续上篇介绍 Java GRPC proto 编译 现在我们拿到了编译的 Java 文件，其中 User.java 为 rpc 通信，文件名同 .proto 文件名称；CreateAccountGrpc.java 为定义的服务</description>
    </item>
    
    <item>
      <title>Java GRPC proto 编译</title>
      <link>https://www.wingsxdu.com/p1216/</link>
      <pubDate>Thu, 23 May 2019 06:04:45 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1216/</guid>
      <description>相较于Go，Java 中的使用步骤就繁琐了很多，我也是折腾了很久才搞清楚。、 环境 ubuntu 16.04 IDE：Intellig IDEA Java 编译：Gradle proto 编译 使用 Gradle</description>
    </item>
    
  </channel>
</rss>