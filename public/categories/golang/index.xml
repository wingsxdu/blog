<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on beihai</title>
    <link>https://www.wingsxdu.com/categories/golang/</link>
    <description>Recent content in Golang on beihai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 09 Nov 2019 19:48:59 +0800</lastBuildDate>
    
	<atom:link href="https://www.wingsxdu.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2019 11 09 Goredis</title>
      <link>https://www.wingsxdu.com/post/2019-11-09-goredis/</link>
      <pubDate>Sat, 09 Nov 2019 19:48:59 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-11-09-goredis/</guid>
      <description>center Title</description>
    </item>
    
    <item>
      <title>为什么使用通信来共享内存？· Why&#39;s THE Design?（转载）</title>
      <link>https://www.wingsxdu.com/post/2019-11-01-whys-the-design-communication-shared-memory/</link>
      <pubDate>Fri, 01 Nov 2019 14:24:34 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-11-01-whys-the-design-communication-shared-memory/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;为什么这么设计（Why’s THE Design）是一系列关于计算机领域中程序设计决策的文章，我们在这个系列的每一篇文章中都会提出一个具体的问题并从不同的角度讨论这种设计的优缺点、对具体实现造成的影响。如果你有想要了解的问题，可以在文章下面留言。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>内存空洞</title>
      <link>https://www.wingsxdu.com/post/2019-10-10-memoryholes/</link>
      <pubDate>Thu, 10 Oct 2019 10:35:26 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-10-10-memoryholes/</guid>
      <description>&lt;p&gt;计算机在加载和保存数据时，如果内存地址合理地对齐的将会更有效率。例如2字节大小的int16类型的变量地址应该是偶数，一个4字节大小的rune类型变量的地址应该是4的倍数，一个8字节大小的float64、uint64或64-bit指针类型变量的地址应该是8字节对齐的。但是对于再大的地址对齐倍数则是不需要的，即使是complex128等较大的数据类型最多也只是8字节对齐。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程与 Goroutine 调度</title>
      <link>https://www.wingsxdu.com/post/2019-09-29-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E-goroutine-%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 29 Sep 2019 17:20:37 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-09-29-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E-goroutine-%E8%B0%83%E5%BA%A6/</guid>
      <description>并发与并行 并行是指两个或者多个事件在同一时刻发生；并发是指两个或多个事件在同一时间间隔发生。 并行是在不同实体上的多个事件，在多台处理器上同时</description>
    </item>
    
    <item>
      <title>GC 垃圾回收机制(改)</title>
      <link>https://www.wingsxdu.com/post/2019-09-29-golanggc/</link>
      <pubDate>Fri, 27 Sep 2019 21:42:49 +0800</pubDate>
      
      <guid>https://www.wingsxdu.com/post/2019-09-29-golanggc/</guid>
      <description>首先我们了解下什么是垃圾回收 内存管理是开发应用中的一大难题。传统的系统级编程语言（主要指C/C++）中，程序开发者必须对内存小心的进行管理操</description>
    </item>
    
    <item>
      <title>GO 1.13版本改进</title>
      <link>https://www.wingsxdu.com/p1391/</link>
      <pubDate>Mon, 09 Sep 2019 03:45:17 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1391/</guid>
      <description>Go1.13 版本在 Go1.12 发布六个月后推出。它的大部分变化都在工具链(toolchain)，运行时(runtime)和库的实现。从 Go1.13 开始，在Go1.11开始</description>
    </item>
    
    <item>
      <title>beego 是怎样的存在？</title>
      <link>https://www.wingsxdu.com/p1386/</link>
      <pubDate>Sun, 08 Sep 2019 15:59:52 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1386/</guid>
      <description>beego 是一个 RESTFul 的 Go 应用框架，可以用来快速开发 API 、Web、后端服务等各种应用，主程是国人，开发历史悠久。 beego 可以说是小白学习 golang 的“不二门选”，无论是</description>
    </item>
    
    <item>
      <title>Golang strconv包使用</title>
      <link>https://www.wingsxdu.com/p1370/</link>
      <pubDate>Fri, 09 Aug 2019 09:45:19 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1370/</guid>
      <description>// atob.go ------------------------------------------------------------ // ParseBool 将字符串转换为布尔值 // 它接受真值：1, t, T, TRUE, true, True // 它接受假值：0, f, F, FALSE, false, False. // 其它任何值都返回一个错误 func ParseBool(str string) (value bool, err error) func main() { fmt.Println(strconv.ParseBool(&#34;1&#34;)) // true fmt.Println(strconv.ParseBool(&#34;t&#34;))</description>
    </item>
    
    <item>
      <title>Go 变量覆盖问题</title>
      <link>https://www.wingsxdu.com/p1368/</link>
      <pubDate>Fri, 09 Aug 2019 03:12:54 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1368/</guid>
      <description>如下代码 package main func main() { x := 1 println(x) // 1 { println(x) // 1 x := 2 println(x) // 2 // 新的 x 变量的作用域只在代码块内部 } println(x) // 1 } 代码引用变量时总会最优先查找当前代码块中（不包</description>
    </item>
    
    <item>
      <title>Go ECHO JWT 变量类型</title>
      <link>https://www.wingsxdu.com/p1364/</link>
      <pubDate>Tue, 06 Aug 2019 10:09:33 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1364/</guid>
      <description>最近在写自己的开源案例时，需要在 token 里面存入用户的 uid，变量类型为 uint64,然而解析token 中的值时却报错变量不符，类型为 float。</description>
    </item>
    
    <item>
      <title>Go 全局变量作用域</title>
      <link>https://www.wingsxdu.com/p1357/</link>
      <pubDate>Tue, 23 Jul 2019 10:55:16 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1357/</guid>
      <description>问题所在 全局变量的作用域是整个包，局部变量的作用域是该变量所在的花括号内。最近使用 gorm 时遇到了使用全局变量赋值作用域的问题。 var db *gorm.DB // 全局变量用</description>
    </item>
    
    <item>
      <title>Go mod 模块化管理</title>
      <link>https://www.wingsxdu.com/p1351/</link>
      <pubDate>Tue, 23 Jul 2019 08:21:35 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1351/</guid>
      <description>前言 在Go语言的发展史中，2018年注定是一个重要的时间点，因为在8月正式发布了Go1.11。Go1.11语言部分虽然没有变化，但是带来了3</description>
    </item>
    
    <item>
      <title>Go Java 跨语言通信</title>
      <link>https://www.wingsxdu.com/p1244/</link>
      <pubDate>Mon, 27 May 2019 06:53:09 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1244/</guid>
      <description>前言 这两篇文章Java Grpc 工程中使用 Go GRPC使用 介绍了 golang、java 中 grpc 的使用，但仅仅是同语言的进程间通信，grpc 在性能上并没有优</description>
    </item>
    
    <item>
      <title>Go GRPC使用</title>
      <link>https://www.wingsxdu.com/p1204/</link>
      <pubDate>Wed, 22 May 2019 11:59:06 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1204/</guid>
      <description>1.1RPC简介 RPC，全称 Remote Procedure Call——远程过程调用，主要用于分布式系统中程序间的通信，基于 TCP 或 UDP 传输协议实现。RPC 属于 IPC（进程间</description>
    </item>
    
    <item>
      <title>Go 后端获取微信登录用户信息</title>
      <link>https://www.wingsxdu.com/p1185/</link>
      <pubDate>Tue, 21 May 2019 08:59:55 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1185/</guid>
      <description>若想获取微信登录用户的私密信息，如 openid、unionid 等，流程为：用户确认登录后获取临时 code，有效期为5分钟；将 code 发送至后端，后</description>
    </item>
    
    <item>
      <title>Go Echo 中间件</title>
      <link>https://www.wingsxdu.com/p1183/</link>
      <pubDate>Mon, 20 May 2019 07:41:36 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1183/</guid>
      <description>1.1简介 中间价是指在 Request 与 Response 之间对数据进行处理，Echo 中间件的存在极大提高了开发效率，可定制化、可自制中间件，十分实用。 1.2使用 Static 静态文</description>
    </item>
    
    <item>
      <title>Go ORM引擎之 xorm</title>
      <link>https://www.wingsxdu.com/p1129/</link>
      <pubDate>Sun, 19 May 2019 06:37:51 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1129/</guid>
      <description>1.1 orm 引擎简介 ORM 即Object-Relationl Mapping，它的作用是在关系型数据库和对象之间作一个映射，这样，我们在具体的操作数据库的</description>
    </item>
    
    <item>
      <title>Go Echo JWT</title>
      <link>https://www.wingsxdu.com/p1119/</link>
      <pubDate>Sun, 19 May 2019 05:58:55 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1119/</guid>
      <description>1.1 简介 JWT 全称 JSON Web Token ，是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。该信息是数字</description>
    </item>
    
    <item>
      <title>Go Echo&#43;Nginx 搭建 https://域名服务</title>
      <link>https://www.wingsxdu.com/p1106/</link>
      <pubDate>Sat, 18 May 2019 13:55:03 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1106/</guid>
      <description>搭建后端服务时要适配小程序接口，狗日的微信要求请求链接必须为 https://域名，折腾了半天决定用 Nginx 反向 http 代理，又交了300保护费:)。其他</description>
    </item>
    
    <item>
      <title>Go 下载包 golang.org/x/</title>
      <link>https://www.wingsxdu.com/p1095/</link>
      <pubDate>Mon, 13 May 2019 17:22:20 +0000</pubDate>
      
      <guid>https://www.wingsxdu.com/p1095/</guid>
      <description>由于伟大的长城防火墙的存在，我们在使用到 golang.org/x/ 下的包是万万不可能正常下载成功的。但是问题不大，我们可以面向 github 编程，我们可以使用 git 指令把代码clo</description>
    </item>
    
  </channel>
</rss>